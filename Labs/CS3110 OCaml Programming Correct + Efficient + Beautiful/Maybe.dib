#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Maybe

#!fsharp

module WithClass =

    /// Maybe class
    type Maybe =
        static member Just x = Just x

        static member Nothing = Nothing

        static member map f opt =
            match opt with
            | Just x -> Just(f x)
            | Nothing -> Nothing

        static member apply fopt xopt =
            match fopt, xopt with
            | Just f, Just x -> Just(f x)
            | _ -> Nothing

        static member bind f opt =
            match opt with
            | Just x -> f x
            | Nothing -> Nothing

    and Maybe<'a> =
        | Just of 'a
        | Nothing

    let (<!>) opt f = Maybe.map f opt

    let (<*>) xopt fopt = Maybe.apply fopt xopt

    let (>>=) opt f = Maybe.bind f opt


module WithType =

    type Maybe<'a> =
        | Just of 'a
        | Nothing

    /// Maybe functions
    module Maybe =
        let inline map f opt =
            match opt with
            | Just x -> Just(f x)
            | Nothing -> Nothing

        let inline apply fopt xopt =
            match fopt, xopt with
            | Just f, Just x -> Just(f x)
            | _ -> Nothing

        let inline bind f opt =
            match opt with
            | Just x -> f x
            | Nothing -> Nothing

        let inline (<!>) opt f = map f opt

        let inline (<*>) xopt fopt = apply fopt xopt

        let inline (>>=) opt f = bind f opt
