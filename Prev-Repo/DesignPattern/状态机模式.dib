#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 状态机模式

> 这是我面试的时候面试官问我了鬼泣的指令，我重新思考了一下，这其实就是状态机模式。

> 主要内容可以看[这里](https://www.cnblogs.com/KillerAery/p/9680303.html)

考虑下面一段代码。

```csharp
if (input is PressButton.Up)
{
    if (!_isJumping)
    {
        _isJumping = true;
        // Jump
    }
}
```

这只是一个跳跃呃代码，如果是更多行为呢？

```csharp
if (input is PressButton.Up)
{
    if (!_isJumping)
    {
        _isJumping = true;
        // Jump
    }
}
else if (input is PressButton.Down)
{
    if (!_isJumping && !_isFalling)
    {
        // _isJumping = true;
        // Jump
    }
    else if (...)
    {
        // ...
    }
    else 
    {
        // ...
    }
}
```

非常多的 `if-else` ，这种硬编码的方式非常复杂。

那么状态机模式是什么？考虑编译原理其中的第一步：词法分析。词法分析中有一个**有限状态机**的东西，那么对于这个，不就是状态机吗？

```csharp
public enum InputType
{
    PressDown,
    PressB,
    // ...
}

public class Player
{
    public State? State { get; set; } = null;
}

public abstract class State
{
    public abstract void Handle(Player player, InputType input);
}

public class JumpState : State
{
    public override void Handle(Player player, InputType input)
    {
        if (input is InputType.PressDown)
        {
            // ...
            player.State = new DiveState();
        }
    }
}

public class DiveState : State
{
    public override void Handle(Player player, InputType input)
    {
    }
}

public class SneakState : State
{
    public override void Handle(Player player, InputType input)
    {
        if (input is InputType.PressDown)
        {
            // ...
            player.State = new StandState();
        }
    }
}

public class StandState : State
{
    public override void Handle(Player player, InputType input)
    {
        if (input is InputType.PressB)
        {
            // ..
            player.State = new JumpState();
        }
        else if (input is InputType.PressDown)
        {
            // ...
            player.State = new StandState();
        }
    }
}
```

这里，对象就是边。

要怎么用呢？

```csharp
player.State?.Handle(player, input);
```

如果 `State` 为空，还是得判断一下，所以其实这里用非空会更合适，你只需要给对象一个初始化状态就好了。

现在，只需要将每个节点的条件逻辑封装到各个状态类中，然后代码就变得非常优雅了。

不过一般来说，这种状态机其实都是用单例模式的，也就是这些节点应该提供一个自己的单例模式。

下面就是一个关于状态机设计模式的一个实例演示了。

#!csharp

#nullable enable

public interface IContext<TSource>
{
    IState<TSource>? State { get; set; }
    bool Request(TSource source);
}

public interface IState<TSource>
{
    bool Handle(IContext<TSource> context, TSource source);
}

public interface IContext
{
    IState? State { get; set; }
    bool Request();
}

public interface IState
{
    bool Handle(IContext context);
}

public class ConcreteStateA : IState
{
    public bool Handle(IContext context)
    {
        Console.WriteLine("State A");
        return true;
    }
}

public class ConcreteStateB : IState
{
    public bool Handle(IContext context)
    {
        Console.WriteLine("State B");
        return true;
    }
}

public class Context : IContext
{
    public IState? _state;

    public IState? State { get => _state; set => _state = value; }

    public bool Request() => _state?.Handle(this) ?? false;
}

#!csharp

var stateA = new ConcreteStateA();
var stateB = new ConcreteStateB();

var context = new Context();

context.Request();  // context.State?.Handle(context);
context.State = stateA;
context.Request();
context.State = stateB;
context.Request();
