#include <cstdint>
#include <iostream>
#include <limits>

using i64 = std::int64_t;

template <typename T> constexpr T inf = std::numeric_limits<T>::max() / 2;

constexpr int DIG[10][5][4] = {
    {
        {1, 1, 1, 1, },
        {1, 0, 0, 1},
        {1, 0, 0, 1},
        {1, 0, 0, 1},
        {1, 1, 1, 1, },
    },
    {
        {0, 0, 1, 1,},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1,},
    },
    {
        {1, 1, 1, 1,},
        {0, 0, 0, 1},
        {1, 1, 1, 1},
        {1, 0, 0, 0},
        {1, 1, 1, 1,},
    },
    {
        {1, 1, 1, 1,},
        {0, 0, 0, 1},
        {1, 1, 1, 1},
        {0, 0, 0, 1},
        {1, 1, 1, 1,},
    },
    {
        {1, 0, 1, 0,},
        {1, 0, 1, 0},
        {1, 1, 1, 1},
        {0, 0, 1, 0},
        {0, 0, 1, 0,},
    },
    {
        {1, 1, 1, 1,},
        {1, 0, 0, 0},
        {1, 1, 1, 1},
        {0, 0, 0, 1},
        {1, 1, 1, 1,},
    },
    {
        {1, 1, 1, 1,},
        {1, 0, 0, 0},
        {1, 1, 1, 1,},
        {1, 0, 0, 1},
        {1, 1, 1, 1,},
    },
    {
        {1, 1, 1, 1,},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1,},
    },
    {
        {1, 1, 1, 1,},
        {1, 0, 0, 1},
        {1, 1, 1, 1,},
        {1, 0, 0, 1},
        {1, 1, 1, 1,},
    },
    {
        {1, 1, 1, 1,},
        {1, 0, 0, 1},
        {1, 1, 1, 1,},
        {0, 0, 0, 1},
        {1, 1, 1, 1,},
    },
    
};

void Main()
{
    int n, x, y;
    std::cin >> n >> x >> y;
    x --; y --;

    int ans = 0;
    std::string s;
    std::cin >> s;
    int d = DIG[s.front() - '0'][x][y];
    for (int i = 1; i < n; i ++) {
        ans += d != DIG[s[i] - '0'][x][y];
        d = DIG[s[i] - '0'][x][y];
    }
    std::cout << ans << '\n';
}

int main()
{
    std::cin.tie(nullptr)->sync_with_stdio(false);

    int t = 1;
    std::cin >> t;
    for (int tt = 1; tt <= t; tt ++)
    {
        // std::cerr << "tt = " << tt << '\n';
        Main();
    }
}