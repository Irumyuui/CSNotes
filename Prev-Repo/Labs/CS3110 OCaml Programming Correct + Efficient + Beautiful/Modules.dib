#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Modules

#!fsharp

module MyStack =
    type 'a stack =
        | Empty
        | Entry of 'a * 'a stack

    let empty = Empty

    let push x stk = Entry(x stk)

    let peek stk =
        match stk with
        | Empty -> None
        | Entry(x, _) -> Some x

    let pop stk =
        match stk with
        | Empty -> None
        | Entry(_, stk) -> Some stk


module ListStack =
    type 'a stack = 'a list

    let empty = []

    let push x s = x :: s

    let peek s =
        match s with
        | [] -> None
        | x :: _ -> Some x

    let pop s =
        match s with
        | [] -> None
        | _ :: xs -> Some xs


module ListQueue =
    type 'a queue = 'a list

    let empty = []

    let enqueue x q = List.append q [ x ]

    let peek q =
        match q with
        | [] -> None
        | x :: _ -> Some x

    let dequeue q =
        match q with
        | [] -> None
        | _ :: xs -> Some xs

module Opts =
    let (>>|) opt f =
        match opt with
        | Some x -> Some <| f x
        | None -> None

    let (>>=) opt f =
        match opt with
        | Some x -> f x
        | None -> None


module TowListQueue =
    type 'a queue = { Front: 'a list; Back: 'a list }

    let empty = { Front = []; Back = [] }

    let peek q =
        match q with
        | { Front = [] } -> None
        | { Front = x :: _ } -> Some x

    let enqueue x q =
        match q with
        | { Front = [] } -> { Front = [ x ]; Back = [] }
        | q -> { q with Back = x :: q.Back }

    let dequeue q =
        match q with
        | { Front = [] } -> None
        | { Front = _ :: xs; Back = ys } ->
            match xs with
            | [] -> Some { Front = List.rev ys; Back = [] }
            | _ -> Some { Front = xs; Back = ys }

    module Main =
        open Opts

        let q = empty |> enqueue 42 |> dequeue >>| enqueue 43 >>= dequeue

        let q' =
            empty |> enqueue 42 |> dequeue |> Option.map (enqueue 43) |> Option.bind dequeue
