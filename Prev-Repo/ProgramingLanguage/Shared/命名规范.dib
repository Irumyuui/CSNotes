#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 命名规范

命名规范是比较头疼的问题。

#!csharp

public class Foo
{
    private int id = 0;
    protected int Id { get => id; set => id = value; }
    public bool IsPass => id > 0;  
}

#!markdown

## 私有字段

私有字段的命名方法一般是使用小驼峰的方式，当然也可以带一个下划线的方式，如果是在 `c++` 内，那么这时候下划线加在后面可能比较好，或者采用 `m_` 这样的方式。

```csharp
int camelCase;

class Foo {
    private int _camelCase;
}
```

```c++
int camelCase;
class Foo {
private:
    int m_camelCase; // 或者 int camelCase_;
}
```

#!markdown

## 命名空间、类名和方法

对于命名空间、类名和方法，基本使用的是 PascalCase 命名。

```csharp
namespace Example;

class Foo {
    private int id;
    public int Id { get => id; set => id = value; } // 属性
    public void Bar() {}  // 方法
}
```

如果是接口名称，那么就是在 PascalCase 命名的前面，添加 `I` 作为接口的标志，如果是泛型，则在前面添加 `T`。

```csharp
public interface IFoo<TValue> {
    public TValue Value { get; set; }
}
```

如果是特性的话，那么就在命名的前面添加 `Attribute` 作为后缀，如果是依赖属性的话，那么就在属性名前面添加 `Property`。

#!markdown

## 方法的单词组成

一般来说，方法的合适命名规范是**选择的合适动词+名词**。

```csharp
public abstract class Pool<TValue> {
    public void Run();
    public void Stop();
    public void Clear();
    public void AddItem<TValue>(TValue item);
}
```

注意最好少用一点单复数一样的单词，因为这列的单词没法标明获取的时间。
