#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# C# 跨语言调用 Python

首先，需要找到你的 python 动态链接库的位置，然后添加到当前程序集的环境变量中。

```csharp
// 从 appsettings.json 中读取更好
const string PYTHON_DLL_PATH = @"C:\ProgramData\anaconda3\python312.dll";
Environment.SetEnvironmentVariable("PYTHONNET_PYDLL", PYTHON_DLL_PATH);
```

然后在 `.csproj` 中添加以下代码，关闭不安全的 `Shutdown` ，来最终关闭 python 。

```xml
<PropertyGroup>
  <EnableUnsafeBinaryFormatterSerialization>true</EnableUnsafeBinaryFormatterSerialization>
</PropertyGroup>
```

在加载完动态链接库后，通过以下代码开始跑环境，在最终要结束的时候，退出掉。

```csharp
PythonEngine.Initialize(true);

// 你的代码

PythonEngine.Shutdown();
```

在调用 python 代码的时候，因为 GIL 锁的原因，因此这边注意调用一下。

```csharp
using (Py.GIL()) {
    // 代码 
}
```

一个简单的示例代码如下。

#!csharp

#r "nuget: pythonnet"

using Python.Runtime;

// 从 appsettings.json 中读取更好
const string PYTHON_DLL_PATH = @"C:\ProgramData\anaconda3\python312.dll";

Environment.SetEnvironmentVariable("PYTHONNET_PYDLL", PYTHON_DLL_PATH);

PythonEngine.Initialize(true);

using (Py.GIL())
{
    dynamic np = Py.Import("numpy");
    Console.WriteLine($"{np.cos(np.pi * 2)}");

    dynamic sin = np.sin;
    Console.WriteLine(sin(5));

    double c = (double)(np.cos(5) + sin(5));
    Console.WriteLine(c);

    dynamic a = np.array(new List<float> { 1, 2, 3 });
    Console.WriteLine(a.dtype);

    dynamic b = np.array(new List<float> { 6, 5, 4 }, dtype: np.int32);
    Console.WriteLine(b.dtype);

    Console.WriteLine(a * b);
}

// 因为这边没办法设置，所以需要捕获一下异常
// PythonEngine.Shutdown();
try {
    PythonEngine.Shutdown();
} catch (Exception) {
    // Ignore
}

Console.WriteLine("End this.");
